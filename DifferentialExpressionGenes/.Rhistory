ctrl = setOptions(clusters.crit = nbArcs)
DBNsimone.50 = simone(data, type = "time-course",
clustering = T, control = ctrl)
DBNsimone.50.net = getNetwork(DBNsimone.50, selection = nbArcs)
DBNsimone.edges = BuildEdges(score = -DBNsimone.50.net$A, threshold = 0)
?buildedges
?BuildEdges
library(G1DBN)
install.packages("G1DBN")
library(G1DBN)
DBNsimone.edges = BuildEdges(score = -DBNsimone.50.net$A, threshold = 0)
DBNsimone.50edges = BuildEdges(score = -DBNsimone.50.net$A, threshold = 0)
DBNsimone.top50 = graph.edgelist(cbind(DBNsimone.50edges[, 1],
DBNsimone.50edges[, 2]))
DBNsimone.nodeCoord = layout.fruchterman.reingold(DBNsimone.top50)
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord, edge.arrow.size = 0.5,
vertex.size = 10, main = "Simone")
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord)
View(DBNsimone.nodeCoord)
DBNsimone.nodeCoord = layout.fruchterman.reingold(DBNsimone.top50)
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord)
plot(DBNsimone.top50)
dev.off()
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord)
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord, edge.arrow.size = 0.5,
vertex.size = 10, main = "Simone")
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord, edge.arrow.size = 0.1,
vertex.size = 10, main = "Simone")
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord, edge.arrow.size = 0.5,
vertex.size = 100, main = "Simone")
plot(DBNsimone.top50, layout = DBNsimone.nodeCoord, edge.arrow.size = 0.5,
vertex.size = 5, main = "Simone")
View(DBNsimone.edges)
View(DBNsimone.nodeCoord)
View(DBNsimone.edges)
View(DBNsimone.50edges)
DBNsimone.50.net$A
DBNsimone.50.net$clusters
DBNsimone.50.net$name
DBNsimone.50.net$directed
View(dataVar2inline)
View(data)
arth800.expr
c <- arth800.expr
str(arth800.expr)
?"simone"
demo(cancer_multitask)
res.coop$penalties
res.coop
demo(simone_timeCourse)
View(pi)
c = data$X
View(c)
m = data$tasks
m
data(arth800)
variance <- diag(var(arth800.expr))
plot(sort(variance, decreasing = T))
posVar2 = which(variance > 2)
dataVar2 = arth800.expr[, posVar2]
dim(dataVar2)
dataVar2inline = dataVar2[c(seq(1, 22, by = 2), seq(2, 22, by = 2)), ]
library(simone)
data = dataVar2inline
View(dataVar2inline)
View(dataVar2inline)
ctrl = setOptions(clusters.crit = "BIC")
dBrassicaFPKM <- read.table(file = "/Users/mblai/Documents/RNAseqData/R500_D_FPKM.txt", header = T)
wwBrassicaFPKM <- read.table(file = "/Users/mblai/Documents/RNAseqData/R500_WW_FPKM.txt", header = T)
# Remove non-unique genes.
# TODO: Look into why there are repeated rows.
dBrassicaFPKM <- dBrassicaFPKM[duplicated(dBrassicaFPKM$gene_short_name) == 0, ]
wwBrassicaFPKM <- wwBrassicaFPKM[duplicated(wwBrassicaFPKM$gene_short_name) == 0, ]
# Merge data.frames.
BrassicaFPKM <- merge(dBrassicaFPKM, wwBrassicaFPKM, by = "gene_short_name")
# Remove unnecessary data.frames.
rm(dBrassicaFPKM)
rm(wwBrassicaFPKM)
# Assign gene names to rownames.
rownames(BrassicaFPKM) <- BrassicaFPKM$gene_short_name
# Remove columns without expression values.
BrassicaFPKM <- BrassicaFPKM[, -c(1, 2, 27)]
# Reduce data set to only genes with some expression.
BrassicaFPKM <- BrassicaFPKM[rowSums(BrassicaFPKM > 10) >= 3,]
# Log2 transform wwBrassicaFPKM data set.
log2FPKM <- log2(BrassicaFPKM + .1)
# Remove BrassicaFPKM data set.
rm(BrassicaFPKM)
# Transpose data set.
log2FPKM <- t(log2FPKM)
# Create vector of Treatment values.
Tmnt <- as.factor(c(rep("Dry", 24), rep("WW", 24)))
# Combine expression data and treatment vector in a list.
BrassicaExpr <- list(expr = data.frame(log2FPKM), status = Tmnt)
# Remove unnecessary data.frame.
rm(log2FPKM)
str(cancer, max.level=1)
str(BrassicaExpr, max.level=1)
ctrl = setOptions(clusters.crit = "BIC")
DBNsimone.BIC = simone(BrassicaExpr, type = "time-course", tasks = status,
clustering = T, control = ctrl)
BrassicaExpr$status
DBNsimone.BIC = simone(BrassicaExpr, type = "time-course", tasks = Tmnt,
clustering = T, control = ctrl)
str(BrassicaExpr)
str(BrassicaExpr$expr)
str(BrassicaExpr$expr, max.level = 1)
str(BrassicaExpr$expr$Bra000003, max.level = 1)
DBNsimone.BIC = simone(BrassicaExpr, type = "time-course", tasks = Tmnt,
clustering = T, control = ctrl)
DBNsimone.BIC = simone(BrassicaExpr$expr, type = "time-course", tasks = Tmnt,
clustering = T, control = ctrl)
Pheno <- read.csv(file.choose())
Values <- Pheno[, 4:9]
# Name rows according to timepoint and replicate.
View(Pheno)
View(Values)
time_rep <- paste(paste("Dry", Pheno$Timepoint, sep = ""), rep(1:12, 12), sep = "-")
rep(1:12, 12), sep = "-")
time_rep <- paste(paste("D", Pheno$Timepoint, sep = ""),
rep(1:12, 12), sep = "-")
time_rep <- c(paste(paste("D", Pheno$Timepoint, sep = ""),
rep(1:12, 12), sep = "-"),
paste(paste("W", Pheno$Timepoint, sep = ""),
rep(1:12, 12), sep = "-"))
time_rep
paste(paste("D", Pheno$Timepoint, sep = ""),
rep(1:12, 12), sep = "-")
rep(1:12, 12)
library(dplyr)
View(Pheno)
Phe <- data.frame(select(Pheno, -ends_with("WW")),
select(logdata, -ends_with("Dry")))
Phe <- data.frame(select(Pheno, -ends_with("WW")),
select(Pheno, -ends_with("Dry")))
View(Phe)
dim(Phe)
colnames(Phe)
Phe <- select(Pheno, -ends_with("WW"))
View(Phe)
Phe <- select(Pheno$Treatment, contains("WW"))
Phe <- select(Pheno$Treatment)
Phe <- filter(Pheno$Treatment)
Phe <- filter(Pheno$Treatment == "WW")
Phe <- filter(Pheno, Treatment == "WW")
View(Phe)
Phe <- rbind(Phe, filter(Pheno, Treatment == "Dry"))
View(Phe)
View(Phe)
View(Phe)
Phe <- filter(Pheno, Treatment == "WW", Treatment == "Dry")
Phe <- filter(Pheno, Treatment == "WW")
Phe <- rbind(Phe, filter(Pheno, Treatment == "Dry"))
View(Phe)
View(Phe)
View(Phe)
288/2
Trmt <- c(rep("W", 144), rep("D", 144))
colnames(Pheno) <- sub("WW", "W", colnames(Pheno))
colnames(Pheno) <- sub("Dry", "D", colnames(Pheno))
View(Pheno)
colnames(Pheno) <- sub("WW", "W", colnames(Pheno))
colnames(Pheno) <- sub("Dry", "D", colnames(Pheno))
View(Pheno)
View(Pheno)
Pheno$Treatment <- sub("WW", "W", Pheno$Treatment)
View(Pheno)
Pheno$Treatment <- sub("Dry", "D", Pheno$Treatment)
View(Pheno)
View(Pheno)
?order_by
Pheno <- read.csv(file.choose())
Pheno$Treatment <- sub("WW", "W", Pheno$Treatment)
Pheno$Treatment <- sub("Dry", "D", Pheno$Treatment)
View(Pheno)
phe <- order_by(Pheno, Treatment)
?order
phe <- order(Pheno$Treatment, decreasing = F)
View(Pheno)
phe <- Pheno[order(Pheno$Treatment), ]
View(phe)
Pheno <- Pheno[order(Pheno$Treatment), ]
rm(phe)
rm(Phe)
time_rep <- paste(Pheno$Treatment, Pheno$Timepoint, sep = "")
head(time_rep)
rep(1:12, 12)
time_rep <- paste(time_rep, rep(1:12, 12), sep = "-")
time_rep
Pheno <- Pheno[, 4:9]
View(Pheno)
View(Values)
rm(Values)
rm(Trmt)
ctrl = setOptions(clusters.crit = "BIC")
BrassicasimoneDBN <- simone(Pheno, type = "time-course",
tasks = time_rep, control = ctrl)
View(Pheno)
View(Pheno)
Pheno <- read.csv(file = "/Users/mblai/Documents/PhenoBrassicaImp.csv")
# Shorten treatment names.
Pheno$Treatment <- sub("WW", "W", Pheno$Treatment)
Pheno$Treatment <- sub("Dry", "D", Pheno$Treatment)
# Order by treatment.
Pheno <- Pheno[order(Pheno$Treatment), ]
# Name rows according to treatment, timepoint and replicate.
time_rep <- paste(Pheno$Treatment, Pheno$Timepoint, sep = "")
time_rep <- paste(time_rep, rep(1:12, 12), sep = "-")
rownames(Pheno) <- time_rep
View(Pheno)
Tmnt <- Pheno$Treatment
# Subset phenotype data.frame to contain only phenotype data.
Pheno <- Pheno[, 4:9]
View(Pheno)
ctrl = setOptions(clusters.crit = "BIC")
BrassicasimoneDBN <- simone(Pheno, type = "time-course",
tasks = Tmnt, control = ctrl)
Brassica <- list(expr = Pheno, status = Tmnt)
BrassicasimoneDBN <- simone(Brassica, type = "time-course",
tasks = status, control = ctrl)
BrassicasimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Brassica$status, control = ctrl)
BrassicasimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt, control = ctrl)
BrassicasimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt, control = ctrl)
View(Pheno)
BrassicaSimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt, control = ctrl)
View(Pheno)
Tmnt <- as.factor(Pheno$Treatment)
Pheno <- read.csv(file = "/Users/mblai/Documents/PhenoBrassicaImp.csv")
# Shorten treatment names.
Pheno$Treatment <- sub("WW", "W", Pheno$Treatment)
Pheno$Treatment <- sub("Dry", "D", Pheno$Treatment)
# Order by treatment.
Pheno <- Pheno[order(Pheno$Treatment), ]
# Name rows according to treatment, timepoint and replicate.
time_rep <- paste(Pheno$Treatment, Pheno$Timepoint, sep = "")
time_rep <- paste(time_rep, rep(1:12, 12), sep = "-")
rownames(Pheno) <- time_rep
# Create vector of treatment.
Tmnt <- as.factor(Pheno$Treatment)
Pheno <- Pheno[, 4:9]
Brassica <- list(expr = Pheno, status = Tmnt)
# Run simone network analysis.
ctrl = setOptions(clusters.crit = "BIC")
BrassicaSimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt, control = ctrl)
install.packages("GEOquery")
source("https://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library(GEOquery)
gmeasure <- getGEO(GEO = 'GDS531')
head(Meta(gmeasure))
OsteolyticLesions <- Table(gmeasure)
View(OsteolyticLesions)
sum(OsteolyticLesions == 0)
sum(OsteolyticLesions == 42.6)
which(OsteolyticLesions == 42.6)
which(OsteolyticLesions == 0)
gene_id <- OsteolyticLesions[, 1]
gene_name <- OsteolyticLesions[, 2]
OsteolyticLesions <- as.matrix(OsteolyticLesions)
View(OsteolyticLesions)
OsteolyticLesions[1:5, 1:5]
OsteolyticLesions <- OsteolyticLesions[, -c(1:2)]
dim(OsteolyticLesions)
OsteolyticLesions <- as.matrix(OsteolyticLesions)
str(OsteolyticLesions)
storage.mode(OsteolyticLesions)
storage.mode(OsteolyticLesions) <- "double"
str(OsteolyticLesions)
?apply
which(OsteolyticLesions == "NA")
gene_na <- apply(OsteolyticLesions, 1, anyNA)
head(gene_na)
tail(gene_na)
sum(gene_na)
sum(gene_na)
OsteolyticLesions <- OsteolyticLesions[!gene_na, ]
OsteolyticLesions <- log(OsteolyticLesions, base = 2)
class <- Columns(gmeasure)$disease.state
table(class)
str(class)
install.packages("multtest")
library(multtest)
biocLite("multtest")
library(multtest)
class_id <- as.numeric(class) - 1
summary(class_id)
unique(class_id)
library(multtest)
plot(DBNsimone.BIC)
plot(BrassicaSimoneDBN)
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
plot(BrassicaNet)
BrassicaNet
plot(BrassicaNet)
BrassicaSimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt)
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
plot(BrassicaNet)
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
plot(BrassicaNet)
str(BrassicaSimoneDBN)
str(BrassicaNet)
?getNetwork
BrassicaNet <- getNetwork(BrassicaSimoneDBN, selection = "BIC")
plot(BrassicaNet)
plot(BrassicaNet, output = "BIC")
plot(BrassicaSimoneDBN, output = "BIC")
library(G1DBN)
DBNsimone = BuildEdges(score = -BrassicaNet$A, threshold = 0)
BrassicaNet$A
BrassicaNet$A
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
BrassicaNet$A
BrassicaSimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt)
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
BrassicaNet$A
BrassicaSimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt, control = ctrl)
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
BrassicaNet$A
str(BrassicaNet)
data(arth800)
variance <- diag(var(arth800.expr))
plot(sort(variance, decreasing = T))
posVar2 = which(variance > 2)
dataVar2 = arth800.expr[, posVar2]
dim(dataVar2)
dataVar2inline = dataVar2[c(seq(1, 22, by = 2), seq(2, 22, by = 2)), ]
library(simone)
data = dataVar2inline
ctrl = setOptions(clusters.crit = "BIC")
DBNsimone.BIC = simone(data, type = "time-course",
clustering = T, control = ctrl)
DBNsimone.BIC.net = getNetwork(DBNsimone.BIC)
DBNsimone.BIC.net$A
BrassicaSimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt)
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
BrassicaNet$A
plot(BrassicaSimoneDBN, output = "BIC")
plot(BrassicaSimoneDBN)
plot(BrassicaNet)
BrassicaNet
DBNsimone.BIC.net
BrassicaSimoneDBN <- simone(Brassica$expr, type = "time-course",
tasks = Tmnt, control = ctrl)
BrassicaNet <- getNetwork(BrassicaSimoneDBN)
BrassicaNet$A
BrassicaNet[[1]]$A
BrassicaNet
plot(BrassicaNet[[1]])
plot(BrassicaNet[[2]])
Pheno <- read.csv(file = "/Users/mblai/Documents/PhenoBrassicaImp.csv")
# Shorten treatment names.
Pheno$Treatment <- sub("WW", "W", Pheno$Treatment)
Pheno$Treatment <- sub("Dry", "D", Pheno$Treatment)
# Order by treatment.
Pheno <- Pheno[order(Pheno$Treatment), ]
View(Pheno)
# Name rows according to treatment, timepoint and replicate.
time_rep <- paste(Pheno$Treatment, Pheno$Timepoint, sep = "")
time_rep <- paste(time_rep, rep(1:12, 12), sep = "-")
rownames(Pheno) <- time_rep
View(Pheno)
View(Pheno)
View(Pheno)
avg <- as.data.table(Pheno)
library(data.table)
avg <- as.data.table(Pheno)
View(avg)
a <- avg[, .(Photo = mean(Photo)), by = Timepoint]
View(a)
a <- avg[, .(Photo = mean(Photo)), by = Timepoint, Treatment]
a <- avg[, .(Photo = mean(Photo)), by = .(Timepoint, Treatment)]
View(a)
a <- avg[, .(Photo = mean(Photo), gs = mean(gs)), by = .(Timepoint, Treatment)]
View(a)
a <- avg[, .(Photo = mean(Photo), gs = mean(gs),
FvFm = mean(Fv.Fm.), Starch = mean(Starch),
NSC = mean(NSC), SM = mean(SM...)),
by = .(Timepoint, Treatment)]
View(a)
Tmnt <- as.factor(a$Treatment)
Tmnt
str(Tmnt)
View(a)
a <- a[, 3:8]
View(a)
B <- list(expr = a, status = Tmnt)
BDBN <- simone(B$expr, type = "time-course",
tasks = Tmnt)
BNet <- getNetwork(BDBN)
BrassicaNet[[1]]$A
BNet[[1]]$A
plot(BDBN)
plot(BNet[[1]])
plot(BNet[[2]])
BDBN[[1]]
BNet[[1]]$A
BNet[[1]]$directed
BNet[[1]]$clusters
BNet[[1]]$name
BNet[[1]]$Theta
getwd()
setwd("/Users/mblai/Documents/GitHub/BrassicaDBN_Neo4j/DifferentialExpressionGenes")
Brassica <- read.csv(file = "BrassicaDEgenes.csv", row.names = 1)
Brassica <- data.frame(select(Brassica, -ends_with("rep2")),
select(Brassica, -ends_with("rep1")))
library(dplyr)
Brassica <- data.frame(select(Brassica, -ends_with("rep2")),
select(Brassica, -ends_with("rep1")))
View(Brassica)
Brassica <- read.csv(file = "BrassicaDEgenes.csv", row.names = 1)
View(Brassica)
colnames(Brassica[, 23])
View(Brassica)
colnames(Brassica)
colnames(Brassica)[23]
colnames(Brassica)[24]
colnames(Brassica)[25]
Brassica <- Brassica[, 1:24]
colnames(Brassica)
Brassica <- data.frame(select(Brassica, -ends_with("rep2")),
select(Brassica, -ends_with("rep1")))
Brassica <- read.csv(file = "BrassicaDEgenes.csv", row.names = 1)
View(Brassica)
colnames(Brassica)[24]
colnames(Brassica)[25]
colnames(Brassica)[48]
Brassica <- Brassica[, 25:48]
library(interventionalDBN)
library(stringr)
library(data.table)
genes <- read.csv(file = "BrassicaDEgenes.csv", row.names = 1)
# Remove cluster column.
genes <- genes[, -49]
# Transform genes to get in correct format for interventionalDBN.
genes <- t(genes)
# Turn into a data.table for ease of manipulation.
genes <- as.data.table(genes, keep.rownames = T)
# Split rownames to extract Timepoint and Treatment.
genes <- genes[, 'rn'  := str_split_fixed(genes$rn, "_", 2)[, 1]]
genes <- genes[, 'Treatment'  := str_split_fixed(genes$rn, "", 2)[, 1]]
genes <- genes[, 'Timepoint'  := str_split_fixed(genes$rn, "", 2)[, 2]]
genes <- genes[, 'rn' := NULL]
#avgRNA <- genes[, mean(genes[, 1:4583]), by = .(Timepoint, Treatment)]
# Create data.frame in appropriate format: Cell.line, Inhibitor,
# Stimuli, Timepoint, and expression values.
rnaNet <- data.frame(Cell.line = rep(1, 48),
Inhibitor = genes$Treatment,
Stimuli = rep("WW", 48),
Timepoint = genes$Timepoint,
genes[, 1:230])
# Define baseline as WW and inhibited as Dry.
droughtEffects <- interventionEffects(rnaNet, 1, "WW", "Dry")
# Update phenoNet to the correct format using the interventionalDBN
# formatData function.
Net <- formatData(rnaNet)
# Create an empty n by P (# of obs by # of cols of expression data)
# Z matrix.
Z <- matrix(0, 48, 230)
# Perform inference for DBN.
Network <- interventionalInference(Net$y,Net$X0,
Net$X1, Z, max.indeg = 3,
perfectOut = T, fixedEffectOut = T)
library(data.table)
library(interventionalDBN)
Pheno <- read.csv(file = "/Users/mblai/Documents/PhenoBrassicaImp.csv")
Pheno <- read.csv(file.choose())
Pheno <- read.csv(file = "/Users/mblai/Documents/GitHub/BrassicaDBN_Neo4j/DataWrangling/PhenoBrassicaImp.csv")
Pheno <- read.csv(file = "/Users/mblai/Documents/GitHub/BrassicaDBN_Neo4j/DataWrangling/PhenoCombinedDataImputation.R")
Pheno <- read.csv(file = "/Users/mblai/Documents/Thesis/Code/DataWrangling/PhenoBrassicaImp.csv")
View(Pheno)
View(Pheno)
Pheno <- read.csv(file = "/Users/mblai/Documents/Thesis/Code/DataWrangling/PhenoBrassicaImp.csv", row.names = 1)
View(Pheno)
Pheno <- as.data.table(Pheno)
avgPheno <- Pheno[, .(Photo = mean(Photo), gs = mean(gs),
FvFm = mean(Fv.Fm.), Starch = mean(Starch),
NSC = mean(NSC), SM = mean(SM...)),
by = .(Timepoint, Treatment)]
avgPheno <- avgPheno[order(Treatment),]
View(avgPheno)
phenoNet <- data.frame(Cell.line = rep(1, 24),
Inhibitor = avgPheno$Treatment,
Stimuli = rep("WW", 24),
Timepoint = avgPheno$Timepoint,
avgPheno[, 3:8])
droughtEffects <- interventionEffects(phenoNet, 1, "WW", "Dry")
phenoNet <- formatData(phenoNet)
Z <- matrix(0, 24, 6)
pNetwork <- interventionalInference(phenoNet$y, phenoNet$X0,
phenoNet$X1, Z, max.indeg = 3,
perfectOut = T, fixedEffectOut = T)
pNetwork$parentSets
pNetwork$pep
pNetwork$MAP
pNetwork$lpost
?interventionalInference
pNetwork$MAPprob
pNetwork$MAmodel
pNetwork$MAPmodel
pNetwork$marginal.likelihood
pNetwork$yhat
getwd()
write.csv(pNetwork$pep, file = "pep.csv")
